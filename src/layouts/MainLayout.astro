---
import "../styles/global.css";
interface Props {
  namespace: string;
}

const { namespace } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
  </head>
  <body data-barba="wrapper" class="relative">
    <div
      class="page-transition-container
      flex
      h-screen
      w-full
      z-10
      absolute
      top-0
      left-0
      pointer-events-none"
    >
      {
        Array.from({ length: 10 }).map((index) => (
          <div class="bar size-full scale-y-0 bg-black" />
        ))
      }
    </div>
    <main data-barba="container" data-barba-namespace={namespace}>
      <slot />
    </main>
  </body>
</html>

<script>
  //@ts-ignore
  import barba from "@barba/core";
  import gsap from "gsap";
  import { SplitText } from "gsap/SplitText";
  import { onceHomeAnimation } from "../animations/home-animations";
  import { homeContentAnimations } from "../animations/home-animations";
  import {
    barsInAnimation,
    barsOutAnimation,
  } from "../animations/global.animations";

  gsap.registerPlugin([SplitText]);

  barba.init({
    debug: true,
    transitions: [
      {
        name: "home",
        to: { namespace: ["home"] },
        async once({ next }) {
          await onceHomeAnimation(next.container);
        },
        async enter({ next, current }) {
          await barsOutAnimation().add(
            homeContentAnimations(next.container),
            "=-0.5"
          );
          current.container.remove();
        },
        async leave({ current }) {
          await barsInAnimation();
          current.container.remove();
        },
      },
      {
        name: "about",
        to: { namespace: ["about"] },
        async enter({ current }) {
          await barsOutAnimation();
          current.container.remove();
        },

        async leave({ current }) {
          await barsInAnimation();
          current.container.remove();
        },
      },
    ],
  });
</script>
